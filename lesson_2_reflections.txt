What happens when you initialize a repository? Why do you need to do it?
	#git builds a new repository for the location. It's empty yet, probably just basic headers and pointers are in it. I had to do it because I was told to do it.
How is the staging area different from the working directory and the repository? What value do you think it offers?
	#can prepare the commit there. Decide what to include in a snapshot, and what not. Don't have to include irrelevant files.
	#now i don't know what happened. the commit didn't go through, and it created a "-w" file. Probably notepad++ doesnt have a -w operator. and it created a file called that instead. Anyhow, the commit lost, and I had to make a nother one to sest it.

How can you use the staging area to make sure you have one commit per logical change?
	#git diff, compare working area and staging area.	(it's good to see how much I've added to staging so far.)
	#git diff --staged compares staging area and last commit (good to see how much total change prepared since the last commit)
	#git diff commit1 commit2 shows difference between two commmits. (finding bugs, finding working versions)

	#git add adds modified file to staging area. Where you assemble files to be added to a commit. 
	#git status shows the contents of staging area.
	#git checkout master goes back to the latest commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	#when changes to be introduced which are not part of the main development. Trials, experimental features, etc.

How do the diagrams help you visualize the branch structure?
	#shows where branches started, which commmits are reachable from each other and which are not.
	whem going back to an earlier commit, the warning message shows that any changes made there, wont make it to the later versions. Create a branch for them to follow that path. 
	#git checkout -b new_branch_name

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	#the two branches merges into one. The new one will carry the branch name of the one where the merge was initiated. the commits from the paralell branches will be sorted by commit time. The old branch can be deleted(branch is a label)
	
	
	
	#branch merging: needs three reference points. 
	 -the one where they branched.
	 -the two I want to merge
	#from these three, all the changes introduced, removed, etc. can be logically deducted and will result in a working code.
	#when two branches merged, they will become one, and will be named after the one chosen to be carried on. The other branch label will be deleted from the commits.
	#after the merger, the commits on two different branches will belong the surviving one listed in order of commit time.
	

